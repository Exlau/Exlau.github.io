<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS备忘</title>
    <url>/2020/10/21/JS%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><h2 id="一般事件绑定"><a href="#一般事件绑定" class="headerlink" title="一般事件绑定"></a>一般事件绑定</h2><ul>
<li><p><code>.onclick</code>：点击事件</p>
</li>
<li><p><code>.onfocus</code>：聚焦（选中）</p>
</li>
<li><p><code>.onblur</code>：解除聚焦</p>
</li>
<li><p><code>.onmouse(over/out)</code>：鼠标移入/移开</p>
</li>
<li><p><code>.onsubmit</code>：表单提交</p>
</li>
<li><p><code>.addEventListener(&#39;事件&#39;,函数)/removeEventListener(&#39;事件&#39;,函数)</code>：添加/移除，监听事件，可对一个对象的一个事件添加两个不同函数</p>
</li>
</ul>
<h2 id="特殊对象"><a href="#特殊对象" class="headerlink" title="特殊对象"></a>特殊对象</h2><ul>
<li>诸如<code>event evt e（可以是任何表示）</code>都是事件对象会默认传入事件绑定的函数，<code>event/evt/e.target</code>指刚刚发生事件的元素</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li><p><code>Objet().</code>的属性不被继承，而<code>Object.prototype.</code>的属性被继承</p>
</li>
<li><p><code>.call()</code>：这个函数允许您调用一个在这个文件里别处定义的函数。第一个参数指明了在您运行这个函数时想对“<code>this</code>”指定的值，也就是说，您可以重新指定您调用的函数里所有“<code>this</code>”指向的对象。可以让构造器继承某个构造器的属性</p>
</li>
<li><p><code>newObj.prototype = Object.create(Obj.prototype)</code>这串代码使得newObj继承了Obj的方法</p>
</li>
<li><p><code>newObj.prototype.constructor = newObj</code>这使得newObj的prototype和constructior只想的newObj构造器本身，而不是调用call函数的对象的构造器</p>
</li>
<li><p><code>Obj.prototype.constructor===Obj()（构造方法）</code></p>
</li>
</ul>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><strong>纯数据，无函数</strong></p>
<ul>
<li>获取内部成员的方法类似对象</li>
<li><code>.parse()</code>：接收json字符串，返回json对象</li>
<li><code>.stringify()</code>：接收对象，返回json字符串</li>
</ul>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>JS一般是单线程</p>
<p><code>() =&gt; x</code> 是 <code>()=&gt; &#123;return x;&#125;</code> 的有效简写; </p>
<h3 id="callbacks-回调函数"><a href="#callbacks-回调函数" class="headerlink" title="callbacks(回调函数)"></a>callbacks(回调函数)</h3><p>将回调函数作为参数传递给另一个函数仅仅是把回调函数定义作为参数传递过去 — 回调函数并没有立刻执行，回调函数会在包含它的函数的某个地方异步执行，包含函数负责在合适的时候执行回调函数。</p>
<h3 id="promises"><a href="#promises" class="headerlink" title="promises"></a>promises</h3><p>用来表示异步操作成功或者失败的对象</p>
<p>​    有三个状态：</p>
<ul>
<li><p>pending(待定)</p>
</li>
<li><p>resolved(已解决)</p>
<ul>
<li>fullfilled（成功）</li>
<li>rejected（失败）</li>
</ul>
</li>
</ul>
<p><code>promise.all()</code>：传入promise数组，当数组中所有promise执行成功后再执行<code>promise.all()</code>的<code>then</code></p>
<h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><h4 id="setTimeout-和setInterval"><a href="#setTimeout-和setInterval" class="headerlink" title="setTimeout()和setInterval()"></a>setTimeout()和setInterval()</h4><ul>
<li><p><code>setTimeout(func,time)</code>：在一段时间time后执行函数func</p>
<ul>
<li><code>clearTimeout()</code>：清除</li>
</ul>
</li>
<li><p><code>setInterval(func,time)</code>：以固定时间间隔重复运行代码</p>
<ul>
<li><p><code>clearInterval()</code>：清除intervals</p>
</li>
<li><pre><code class="javascript">setTimeout(func,time)
function func()&#123;
    //options-codes;
    setTimeout(func,time);
&#125;
//用递归和setTimeout()实现与setInterval相同的功能</code></pre>
</li>
</ul>
</li>
<li><p><code>setTimeout()</code>严格按照所传入的时间间隔执行，而<code>setInterval()</code>传入的时间间隔则包括代码执行时间和间隔时间(<em>例如传入100ms，代码执行10ms，则实际间隔只有90ms</em>)</p>
</li>
<li><p>使用<strong>0</strong>用作<code>setTimeout()</code>的回调函数会立刻执行，但是在主线程代码运行之后执行。</p>
</li>
</ul>
<h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h4><ul>
<li><code>requestAnimationFrame()</code>：setInterval()的现代版本;在浏览器下一次重新绘制显示之前执行指定的代码块，从而允许动画在适当的帧率下运行，而不管它在什么环境中运行.</li>
<li><code>requestAnimationFrame()</code>:可传入一个带时间戳参数的函数，表示从函数执行到现在的时间</li>
<li><code>cancelAnimationFrame()</code>：用于撤销动画</li>
</ul>
<h3 id="异步API"><a href="#异步API" class="headerlink" title="异步API"></a>异步API</h3><ul>
<li><code>URL.createObjectURL(thing)</code>：此静态方法会创建一个thing的URL</li>
</ul>
<p><strong>fetch</strong></p>
<ul>
<li>全局fetch：<code>fetch(URL).then(func1()).then(func2()).catch(func3(err))</code>：返回一个promise，两个<code>then</code>的参数都是回调函数，如果前一个操作成功则运行该回调函数，并且每个回调函数的参数均是前一个操作的返回值，每个<code>then</code>也会返回一个promise，当任何一个<code>then</code>失败就会运行<code>catch</code></li>
</ul>
<h2 id="APIS"><a href="#APIS" class="headerlink" title="APIS"></a>APIS</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul>
<li>window是载入浏览器的标签，在JavaScript中用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>Window</code></a>对象来表示，使用这个对象的可用方法，你可以返回窗口的大小（参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerWidth"><code>Window.innerWidth</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerHeight"><code>Window.innerHeight</code></a>），操作载入窗口的文档，存储客户端上文档的特殊数据（例如使用本地数据库或其他存储设备），为当前窗口绑定<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#A_series_of_fortunate_events">event handler</a>，等等。</li>
<li>navigator表示浏览器存在于web上的状态和标识（即用户代理）。在JavaScript中，用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator"><code>Navigator</code></a>来表示。你可以用这个对象获取一些信息，比如来自用户摄像头的地理信息、用户偏爱的语言、多媒体流等等。</li>
<li>document（在浏览器中用DOM表示）是载入窗口的实际页面，在JavaScript中用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 对象表示，你可以用这个对象来返回和操作文档中HTML和CSS上的信息。例如获取DOM中一个元素的引用，修改其文本内容，并应用新的样式，创建新的元素并添加为当前元素的子元素，甚至把他们一起删除。<ul>
<li><code>.querySelector()</code>：根据dom规则寻找元素</li>
<li><code>.appendChild()</code>：添加子元素</li>
<li><code>.removeChild()</code>：rm子元素</li>
</ul>
</li>
</ul>
<h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><ul>
<li><code>\d</code>：匹配数字</li>
<li><code>\w</code>：匹配字母</li>
<li><code>.</code>：匹配任意字符</li>
<li><code>*</code>：匹配任意个字符，包括<strong>0</strong>个，<ul>
<li>用**+**来表示至少包含一个字符，</li>
<li><strong>？</strong>来匹配0或者1个字符，</li>
<li>{n}表示n个字符</li>
<li>{n,m}表示n-m个字符</li>
</ul>
</li>
<li><code>\s</code>：匹配空白符</li>
<li><code>[]</code>：表示范围，例如<code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线</li>
<li><code>A|B</code>：匹配A或者B</li>
<li><code>^</code>：表示行的开头<ul>
<li><code>^\d</code>：表示以数字开头</li>
</ul>
</li>
<li><code>$</code>：表示行结束<ul>
<li><code>\d$</code>：表示以数字结束</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTML备忘</title>
    <url>/2020/10/14/HTML%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML备忘录"><a href="#HTML备忘录" class="headerlink" title="HTML备忘录"></a>HTML备忘录</h1><h2 id="标签相关"><a href="#标签相关" class="headerlink" title="标签相关"></a>标签相关</h2><ul>
<li><p>块级元素自动换行而内联元素不自动换行</p>
</li>
<li><p>disabled = <em>value</em> 无论<em>value</em>值为什么，标签都会处于disabled状态，想要改变需将<em>value</em>置空</p>
</li>
<li><p>特殊字符引用表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">原义字符</th>
<th align="left">等价字符引用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;”</td>
<td align="left">&amp;lt</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">&amp;gt</td>
</tr>
<tr>
<td align="left">“</td>
<td align="left">&amp;quot</td>
</tr>
<tr>
<td align="left">‘</td>
<td align="left">&amp;apos</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">&amp;amp</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li><p>使用相对路径优于绝对路径(舍去了DNS查找等操作)</p>
</li>
<li><p><code>&lt;script&gt;</code>放在<code> &lt;body&gt;</code>末尾前更优，这样可以确保脚本加载前浏览器已经解析HTML内容</p>
</li>
<li><p><code> &lt;a&gt;</code>标签的title属性作为悬停提示</p>
</li>
<li><p>href的mailto subject cc body等关键字，用于发送邮件</p>
</li>
<li><p>描述列表</p>
</li>
<li><p>块引用<code> &lt;blockquote cite=&quot;url&quot;&gt;&lt;/blockquote&gt;</code></p>
</li>
<li><p>行内引用<code>&lt;q cite=&quot;url&quot;&gt;</code></p>
</li>
<li><p>缩略语<code>&lt;abbr title=&quot;..&quot;&gt;&lt;/abbr&gt;</code></p>
</li>
<li><p>保留空格渲染<code>&lt;pre&gt;content&lt;/pre&gt;</code></p>
</li>
<li><p>标记键盘输入<code>&lt;kbd&gt;&lt;/kbd&gt;</code></p>
</li>
<li><p>换行<code>&lt;br&gt;</code></p>
</li>
<li><p>水平线<code>&lt;hr&gt;</code></p>
</li>
<li><p>嵌入其他网页<code>&lt;iframe&gt;</code></p>
<p>属性：</p>
<p>allowfullscreen：可设置全屏</p>
<p>frameborder：边框</p>
<p>（尽量用js设置src）</p>
</li>
<li><p>嵌入PDF,SVG,Flash—<code>&lt;embed&gt;&lt;object&gt;</code></p>
</li>
<li><p>视频标签:<code>&lt;video&gt;</code></p>
<p>属性：</p>
<p>autoplay:自动播放</p>
<p>loop:循环</p>
<p>muted:静音播放</p>
<p>poster:封面图</p>
<p>preload:缓冲（”none”：不缓冲 “auto”：页面加载自动缓冲）</p>
</li>
<li><p>权限管理 sandbox属性</p>
</li>
<li><p>表格相关</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- colgroup 必须包含在table标签内--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">colgroup</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;#&quot;</span> <span class="attr">span</span>=<span class="string">&quot;x&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- col标签可以指定每一行的属性，span是需要设置属性的行数--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- table row --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- table data --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
</li>
</ul>
<h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><ul>
<li><p>```<img>``的 srcset和sizes属性</p>
<p>举例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--srcset是一个文件列表，后面以w为单位的数据是文件的像素大小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg 320w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-480w.jpg 480w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-800w.jpg 800w&quot;</span></span></span><br><span class="line">     &lt;!-- sizes 括号内的是条件 括号外的是前面条件为真时采用的样式--&gt;</span><br><span class="line">     sizes=&quot;(max-width: 320px) 280px,</span><br><span class="line">            (max-width: 480px) 440px,</span><br><span class="line">            800px&quot; <span class="comment">&lt;!--无条件的是默认样式--&gt;</span></span><br><span class="line">     src=&quot;elva-fairy-800w.jpg&quot; alt=&quot;Elva dressed as a fairy&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;picture&gt;</code>的应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​	&#96;&#96;&#96;&lt;soucre&gt;&#96;&#96;&#96;包含media srcset sizes属性</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">&lt;source media&#x3D;&quot;(maxwidth:799px)&quot;srcset&#x3D;&quot;exa.jpg&quot;&gt;</span><br><span class="line">&lt;!--media属性设置一个条件，为真则显示此图片--&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>aaa</p>
]]></content>
      <tags>
        <tag>HTML备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS备忘</title>
    <url>/2020/11/04/CSS%E5%A4%87%E5%BF%98(building)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS备忘（building）"><a href="#CSS备忘（building）" class="headerlink" title="CSS备忘（building）"></a>CSS备忘（building）</h1><h2 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h2><ul>
<li><p>border-bottom：仅下边框</p>
</li>
<li><p>text-decoration：文字修饰</p>
</li>
<li><p>all：将选择器选中的部分设置为同一个样式(一般只能是共有的 inherit unset等)</p>
</li>
<li><p><code>background</code>相关</p>
<ul>
<li><code>background-size</code>:<ul>
<li><code>cover</code> —浏览器将使图像足够大，使它完全覆盖了盒子区，同时仍然保持其高宽比。在这种情况下，有些图像可能会跳出盒子外</li>
<li><code>contain</code> — 浏览器将使图像的大小适合盒子内。在这种情况下，如果图像的长宽比与盒子的长宽比不同，则可能在图像的任何一边或顶部和底部出现间隙。</li>
</ul>
</li>
<li><code>background-positon</code>：(根据坐标调整，默认(0,0)为左上角)<ul>
<li>设置规则为：先x轴后y轴</li>
</ul>
</li>
<li><code>background-attachment</code>：<ul>
<li><code>scroll</code>：使背景随页面滚动而滚动</li>
<li><code>fixed</code>：固定</li>
<li><code>local</code>：</li>
</ul>
</li>
</ul>
</li>
<li><p><code>inline-size</code>：可自动根据书写模式调整内联文本宽度</p>
</li>
<li><p><code>overflow</code>:（当溢出盒子时应怎样处理溢出的文本）</p>
<ul>
<li><code>visible</code>：默认属性，可视</li>
<li><code>hidden</code></li>
<li><code>scroll</code>：添加滚动条，可与-x,-y配合使用</li>
</ul>
</li>
<li><p><code>opacity</code>:透明度</p>
</li>
<li><p>min-，max-属性：（设置最值）</p>
<p>例如</p>
<ul>
<li><code>min-height</code>：最小高度</li>
</ul>
</li>
<li><p><code>object-fit</code>：（调整图像覆盖方式）</p>
<ul>
<li><code>cover</code>：比例不变，覆盖盒子</li>
<li><code>contain</code>：比例不变，适应盒子</li>
<li><code>fill</code>：比例变，覆盖盒子</li>
</ul>
</li>
</ul>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font.html">font</a></td>
<td align="left">在一个声明中设置所有的字体属性</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-family.html">font-family</a></td>
<td align="left">指定文本的字体系列</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-size.html">font-size</a></td>
<td align="left">指定文本的字体大小</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-style.html">font-style</a></td>
<td align="left">指定文本的字体样式</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-variant.html">font-variant</a></td>
<td align="left">以小型大写字体或者正常字体显示文本。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-weight.html">font-weight</a></td>
<td align="left">指定字体的粗细。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li><code>a:link</code> - 正常，未访问过的链接</li>
<li><code>a:visited</code> - 用户已访问过的链接</li>
<li><code>a:hover</code> - 当用户鼠标放在链接上时</li>
<li><code>a:active</code> - 链接被点击的那一刻</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li><code>list-style-type</code>：改变列表前的圆点<ul>
<li>可添加图片<code>list-style-type: url()</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style.html">list-style</a></td>
<td align="left">简写属性。用于把所有用于列表的属性设置于一个声明中</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style-image.html">list-style-image</a></td>
<td align="left">将图像设置为列表项标志。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style-position.html">list-style-position</a></td>
<td align="left">设置列表中列表项标志的位置。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style-type.html">list-style-type</a></td>
<td align="left">设置列表项标志的类型。</td>
</tr>
</tbody></table>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border.html">border</a></td>
<td align="left">简写属性，用于把针对四个边的属性设置在一个声明。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-style.html">border-style</a></td>
<td align="left">用于设置元素所有边框的样式，或者单独地为各边设置边框样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-width.html">border-width</a></td>
<td align="left">简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-color.html">border-color</a></td>
<td align="left">简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom.html">border-bottom</a></td>
<td align="left">简写属性，用于把下边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-color.html">border-bottom-color</a></td>
<td align="left">设置元素的下边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-style.html">border-bottom-style</a></td>
<td align="left">设置元素的下边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-width.html">border-bottom-width</a></td>
<td align="left">设置元素的下边框的宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left.html">border-left</a></td>
<td align="left">简写属性，用于把左边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-color.html">border-left-color</a></td>
<td align="left">设置元素的左边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-style.html">border-left-style</a></td>
<td align="left">设置元素的左边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-width.html">border-left-width</a></td>
<td align="left">设置元素的左边框的宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right.html">border-right</a></td>
<td align="left">简写属性，用于把右边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-color.html">border-right-color</a></td>
<td align="left">设置元素的右边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-style.html">border-right-style</a></td>
<td align="left">设置元素的右边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-width.html">border-right-width</a></td>
<td align="left">设置元素的右边框的宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top.html">border-top</a></td>
<td align="left">简写属性，用于把上边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-color.html">border-top-color</a></td>
<td align="left">设置元素的上边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-style.html">border-top-style</a></td>
<td align="left">设置元素的上边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-width.html">border-top-width</a></td>
<td align="left">设置元素的上边框的宽度。</td>
</tr>
</tbody></table>
<h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓:outline"></a>轮廓:outline</h3><p><strong>outline</strong>包围在<strong>border</strong>旁边</p>
<p><code>outline: outline-color, outline-style, outline-width</code></p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>outline-color</em></td>
<td align="left">规定边框的颜色。</td>
</tr>
<tr>
<td align="left"><em>outline-style</em></td>
<td align="left">规定边框的样式。</td>
</tr>
<tr>
<td align="left"><em>outline-width</em></td>
<td align="left">规定边框的宽度。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应该从父元素继承 outline 属性的设置。</td>
</tr>
</tbody></table>
<h3 id="隐藏与显示"><a href="#隐藏与显示" class="headerlink" title="隐藏与显示"></a>隐藏与显示</h3><ul>
<li><code>display:none</code>：占位和本体都消失</li>
<li><code>visibility:hidden</code>：仅本体消失，占位还在</li>
</ul>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul>
<li><code>display:inline</code>：将元素设置为内联元素<ul>
<li>不能修改width、height属性，大小由内容撑开</li>
<li>padding属性 top、right、bottom、left设置都有效；margin属性只有left、right设置有效</li>
</ul>
</li>
<li><code>display:block</code>：将元素设置为块级元素</li>
<li><code>display:inline-block</code>：元素设置为行内块级元素<ul>
<li>共享行</li>
<li>可修改width height</li>
</ul>
</li>
</ul>
<h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><ul>
<li><p><code>static</code>：遵循浏览器本身的规则</p>
</li>
<li><p><code>fixed</code>：固定定位，即使滚动窗口也不动</p>
</li>
<li><p><code>relative</code>：相对定位，相对其<code>static</code>的位置。在定义<code>position:relative</code>后进行位置移动会在其<code>static</code>位置的基础上移动</p>
</li>
<li><p><code>absolute</code>：相对于最近已定位父元素，如果没有， 则相对于<code>&lt;html&gt;</code>元素</p>
</li>
<li><p><code>sticky</code>：粘性定位的元素是依赖于用户的滚动，在 <code>position:relative</code> 与 <code>position:fixed</code> 定位之间切换。</p>
<p>它的行为就像 <code>position:relative</code>页面滚动超出目标区域时，它的表现就像 <code>position:fixed</code>，它会固定在目标位置。</p>
<p>超过某个阈值会变为<code>fixed</code></p>
</li>
</ul>
<h3 id="重叠处理"><a href="#重叠处理" class="headerlink" title="重叠处理"></a>重叠处理</h3><ul>
<li><code>z-index：</code>赋一个数值，越大在z轴方向堆叠越高</li>
</ul>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ul>
<li><code>clear</code>：属性指定元素两侧不能出现浮动元素，避免元素混乱<ul>
<li>both</li>
</ul>
</li>
</ul>
<h2 id="继承相关"><a href="#继承相关" class="headerlink" title="继承相关"></a>继承相关</h2><h3 id="不能继承的属性"><a href="#不能继承的属性" class="headerlink" title="不能继承的属性"></a>不能继承的属性</h3><ul>
<li>width</li>
</ul>
<h3 id="控制继承"><a href="#控制继承" class="headerlink" title="控制继承"></a>控制继承</h3><ul>
<li>inherit：强制开启继承</li>
<li>initial：设置为浏览器默认</li>
<li>unset：设置为文档默认</li>
</ul>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">示例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[attr]</code></td>
<td align="left"><code>a[title]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素——方括号里的值。</td>
</tr>
<tr>
<td align="left"><code>[attr=value]</code></td>
<td align="left"><code>a[href=&quot;https://example.com&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值正为<em>value</em>——引号中的字符串。</td>
</tr>
<tr>
<td align="left"><code>[attr~=value]</code></td>
<td align="left"><code>p[class~=&quot;special&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素 ，其值正为<em>value</em>，或者匹配带有一个<em>attr</em>属性的元素，其值有一个或者更多，至少有一个和<em>value</em>匹配。（即可以匹配class=”hello special”类似这样的)</td>
</tr>
<tr>
<td align="left">`[attr</td>
<td align="left">=value]`</td>
<td align="left">`div[lang</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">示例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[attr^=value]</code></td>
<td align="left"><code>li[class^=&quot;box-&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值开头为<em>value</em>子字符串。</td>
</tr>
<tr>
<td align="left"><code>[attr$=value]</code></td>
<td align="left"><code>li[class$=&quot;-box&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值结尾为<em>value</em>子字符串</td>
</tr>
<tr>
<td align="left"><code>[attr*=value]</code></td>
<td align="left"><code>li[class*=&quot;box&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td>
</tr>
</tbody></table>
<hr>
<ul>
<li><strong><em>i</em></strong> 标记可让浏览器以大小写不敏感的方式检测选择器    </li>
</ul>
<h2 id="单位制度"><a href="#单位制度" class="headerlink" title="单位制度"></a>单位制度</h2><table>
<thead>
<tr>
<th align="left">单位</th>
<th align="left">名称</th>
<th align="left">等价换算</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>cm</code></td>
<td align="left">厘米</td>
<td align="left">1cm = 96px/2.54</td>
</tr>
<tr>
<td align="left"><code>mm</code></td>
<td align="left">毫米</td>
<td align="left">1mm = 1/10th of 1cm</td>
</tr>
<tr>
<td align="left"><code>Q</code></td>
<td align="left">四分之一毫米</td>
<td align="left">1Q = 1/40th of 1cm</td>
</tr>
<tr>
<td align="left"><code>in</code></td>
<td align="left">英寸</td>
<td align="left">1in = 2.54cm = 96px</td>
</tr>
<tr>
<td align="left"><code>pc</code></td>
<td align="left">十二点活字</td>
<td align="left">1pc = 1/16th of 1in</td>
</tr>
<tr>
<td align="left"><code>pt</code></td>
<td align="left">点</td>
<td align="left">1pt = 1/72th of 1in</td>
</tr>
<tr>
<td align="left"><code>px</code></td>
<td align="left">像素</td>
<td align="left">1px = 1/96th of 1in</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">单位</th>
<th align="left">相对于</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>em</code></td>
<td align="left">在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width</td>
</tr>
<tr>
<td align="left"><code>ex</code></td>
<td align="left">字符“x”的高度</td>
</tr>
<tr>
<td align="left"><code>ch</code></td>
<td align="left">数字“0”的宽度</td>
</tr>
<tr>
<td align="left"><code>rem</code></td>
<td align="left">根元素的字体大小</td>
</tr>
<tr>
<td align="left"><code>lh</code></td>
<td align="left">元素的line-height</td>
</tr>
<tr>
<td align="left"><code>vw</code></td>
<td align="left">视窗宽度的1%</td>
</tr>
<tr>
<td align="left"><code>vh</code></td>
<td align="left">视窗高度的1%</td>
</tr>
<tr>
<td align="left"><code>vmin</code></td>
<td align="left">视窗较小尺寸的1%</td>
</tr>
<tr>
<td align="left"><code>vmax</code></td>
<td align="left">视图大尺寸的1%</td>
</tr>
</tbody></table>
<h2 id="布局相关"><a href="#布局相关" class="headerlink" title="布局相关"></a>布局相关</h2><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><p><img src="https://github.com/Exlau/-/blob/main/flex%E5%B8%83%E5%B1%80.png?raw=true" alt="flex总览"></p>
<ul>
<li><strong>主轴（main axis）</strong>是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 <strong>main start</strong> 和 <strong>main end</strong>。</li>
<li><strong>交叉轴（cross axis）</strong>是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 <strong>cross start</strong> 和 <strong>cross end</strong>。</li>
<li>设置了 <code>display: flex</code> 的父元素被称之为 <strong>flex 容器（flex container）。</strong></li>
<li>在 flex 容器中表现为柔性的盒子的元素被称之为 <strong>flex 项</strong>（<strong>flex item</strong>）</li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><code>flex-direction</code>:（指定主轴方向）<ul>
<li><code>column</code></li>
<li><code>row</code></li>
</ul>
</li>
<li><code>flex-wrap</code>:</li>
<li><code>flex-flow</code>=<code>flex-direction flex-wrap</code></li>
<li><code>flex: num</code>：为每个选项设置相对大小</li>
<li><code>flex-grow</code>：设定多余部分分配比例（无单位）</li>
<li><code>flex-shrink</code>：溢出调整？</li>
<li><code>align-item</code>:  默认的值是 <code>stretch</code>，其会使所有 flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定宽度（即高度），则所有 flex 项将变得与最长的 flex 项一样长（即高度保持一致）。<code>center</code> 值会使这些项保持其原有的高度，但是会在交叉轴居中。这就是那些按钮垂直居中的原因。也可以设置诸如 <code>flex-start</code> 或 <code>flex-end</code> 这样使 flex 项在交叉轴的开始或结束处对齐所有的值。</li>
<li><code>justify-content</code>：<ul>
<li><code>flex-start</code>：默认值，从主轴开始处排列</li>
<li><code>flex-end</code>：排列到主轴末尾</li>
<li><code>center</code>：在主轴居中</li>
<li><code>space-around</code>：均匀分布在主轴</li>
<li><code>space-between</code>：效果同space-around但左右无空隙</li>
</ul>
</li>
</ul>
<h4 id="项排序"><a href="#项排序" class="headerlink" title="项排序"></a>项排序</h4><ul>
<li><code>order</code>：默认值为0，值越大排位越靠后</li>
</ul>
<h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p><code>grid-template-columns:num1 ...numN</code>：添加N个宽度为num的列</p>
<ul>
<li><code>repeat(N,w)</code>方法：创建N个w宽的列</li>
</ul>
</li>
<li><p><code>grid-(column)-gap</code>：调整格间隙</p>
</li>
<li><p><code>grid-auto-rows</code>：隐式表格的高</p>
<ul>
<li><code>minmax(min,max)</code>方法：设置最小和最大值</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>CSS备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>ReadME!!</title>
    <url>/2220/09/20/ReadME!!!/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>欢迎访问！</li>
<li>第一次加载文章首页图可能很慢。。。</li>
<li>如要评论文章，请先填写昵称和邮箱（这两者为必要填写项）</li>
</ul>
]]></content>
      <tags>
        <tag>Hello!</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL相关</title>
    <url>/2020/09/19/mysql%E7%9B%B8%E5%85%B3(building)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL-（building）"><a href="#MySQL-（building）" class="headerlink" title="MySQL!（building）"></a>MySQL!（building）</h1><h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --console</span><br><span class="line">&#x2F;&#x2F;启动</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot shutdown</span><br><span class="line">&#x2F;&#x2F;关闭</span><br></pre></td></tr></table></figure>

<h2 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h2><p>添加用户的的实例，用户名为guest，密码为guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO user </span><br><span class="line">          (host, user, password, </span><br><span class="line">           select_priv, insert_priv, update_priv) </span><br><span class="line">           VALUES (&#39;localhost&#39;, &#39;guest&#39;, </span><br><span class="line">           PASSWORD(&#39;guest123&#39;), &#39;Y&#39;, &#39;Y&#39;, &#39;Y&#39;);</span><br><span class="line">Query OK, 1 row affected (0.20 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT host, user, password FROM user WHERE user &#x3D; &#39;guest&#39;;</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| host      | user    | password         |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| localhost | guest | 6f8c114b58f2ce9e |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>RPC相关</title>
    <url>/2020/10/21/RPC%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">graph LR</span><br><span class="line">本地--&gt;|要执行的函数与函数参数|服务端</span><br><span class="line">服务端--&gt;|通过回调函数传回函数结果|本地</span><br></pre></td></tr></table></figure>

<p>以上传参过程均通过AJAX</p>
<h1 id="传输的数据"><a href="#传输的数据" class="headerlink" title="传输的数据"></a>传输的数据</h1><p><strong>本地：服务端的函数与函数参数</strong></p>
<p><strong>服务端：回调执行结果</strong></p>
<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>将JSON序列化为PHP形式</p>
]]></content>
  </entry>
  <entry>
    <title>《关掉》</title>
    <url>/2020/10/16/%E3%80%8A%E5%85%B3%E6%8E%89%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    关掉！关掉！一定要关掉！再不关掉那些网络游戏，小孩哪有美好的未来？哪有美好的前程？祖国哪有</p>
<h1 id="栋"><a href="#栋" class="headerlink" title="栋"></a>栋</h1><p>梁之才？</p>
<iframe src="//player.bilibili.com/player.html?aid=457253380&bvid=BV1s5411j7Po&cid=242488467&page=1" width="800px" height="450px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" auto="0"> </iframe>]]></content>
      <tags>
        <tag>关掉</tag>
      </tags>
  </entry>
</search>
