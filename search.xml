<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS备忘</title>
    <url>/2020/11/04/CSS%E5%A4%87%E5%BF%98(building)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS备忘（building）"><a href="#CSS备忘（building）" class="headerlink" title="CSS备忘（building）"></a>CSS备忘（building）</h1><h2 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h2><ul>
<li><p>border-bottom：仅下边框</p>
</li>
<li><p>text-decoration：文字修饰</p>
</li>
<li><p>all：将选择器选中的部分设置为同一个样式(一般只能是共有的 inherit unset等)</p>
</li>
<li><p><code>background</code>相关</p>
<ul>
<li><code>background-size</code>:<ul>
<li><code>cover</code> —浏览器将使图像足够大，使它完全覆盖了盒子区，同时仍然保持其高宽比。在这种情况下，有些图像可能会跳出盒子外</li>
<li><code>contain</code> — 浏览器将使图像的大小适合盒子内。在这种情况下，如果图像的长宽比与盒子的长宽比不同，则可能在图像的任何一边或顶部和底部出现间隙。</li>
</ul>
</li>
<li><code>background-positon</code>：(根据坐标调整，默认(0,0)为左上角)<ul>
<li>设置规则为：先x轴后y轴</li>
</ul>
</li>
<li><code>background-attachment</code>：<ul>
<li><code>scroll</code>：使背景随页面滚动而滚动</li>
<li><code>fixed</code>：固定</li>
<li><code>local</code>：</li>
</ul>
</li>
</ul>
</li>
<li><p><code>inline-size</code>：可自动根据书写模式调整内联文本宽度</p>
</li>
<li><p><code>overflow</code>:（当溢出盒子时应怎样处理溢出的文本）</p>
<ul>
<li><code>visible</code>：默认属性，可视</li>
<li><code>hidden</code></li>
<li><code>scroll</code>：添加滚动条，可与-x,-y配合使用</li>
</ul>
</li>
<li><p><code>opacity</code>:透明度</p>
</li>
<li><p>min-，max-属性：（设置最值）</p>
<p>例如</p>
<ul>
<li><code>min-height</code>：最小高度</li>
</ul>
</li>
<li><p><code>object-fit</code>：（调整图像覆盖方式）</p>
<ul>
<li><code>cover</code>：比例不变，覆盖盒子</li>
<li><code>contain</code>：比例不变，适应盒子</li>
<li><code>fill</code>：比例变，覆盖盒子</li>
</ul>
</li>
</ul>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font.html">font</a></td>
<td align="left">在一个声明中设置所有的字体属性</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-family.html">font-family</a></td>
<td align="left">指定文本的字体系列</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-size.html">font-size</a></td>
<td align="left">指定文本的字体大小</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-style.html">font-style</a></td>
<td align="left">指定文本的字体样式</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-font-variant.html">font-variant</a></td>
<td align="left">以小型大写字体或者正常字体显示文本。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-font-weight.html">font-weight</a></td>
<td align="left">指定字体的粗细。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li><code>a:link</code> - 正常，未访问过的链接</li>
<li><code>a:visited</code> - 用户已访问过的链接</li>
<li><code>a:hover</code> - 当用户鼠标放在链接上时</li>
<li><code>a:active</code> - 链接被点击的那一刻</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li><code>list-style-type</code>：改变列表前的圆点<ul>
<li>可添加图片<code>list-style-type: url()</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style.html">list-style</a></td>
<td align="left">简写属性。用于把所有用于列表的属性设置于一个声明中</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style-image.html">list-style-image</a></td>
<td align="left">将图像设置为列表项标志。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style-position.html">list-style-position</a></td>
<td align="left">设置列表中列表项标志的位置。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-list-style-type.html">list-style-type</a></td>
<td align="left">设置列表项标志的类型。</td>
</tr>
</tbody></table>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border.html">border</a></td>
<td align="left">简写属性，用于把针对四个边的属性设置在一个声明。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-style.html">border-style</a></td>
<td align="left">用于设置元素所有边框的样式，或者单独地为各边设置边框样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-width.html">border-width</a></td>
<td align="left">简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-color.html">border-color</a></td>
<td align="left">简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom.html">border-bottom</a></td>
<td align="left">简写属性，用于把下边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-color.html">border-bottom-color</a></td>
<td align="left">设置元素的下边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-style.html">border-bottom-style</a></td>
<td align="left">设置元素的下边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-bottom-width.html">border-bottom-width</a></td>
<td align="left">设置元素的下边框的宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left.html">border-left</a></td>
<td align="left">简写属性，用于把左边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-color.html">border-left-color</a></td>
<td align="left">设置元素的左边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-style.html">border-left-style</a></td>
<td align="left">设置元素的左边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-left-width.html">border-left-width</a></td>
<td align="left">设置元素的左边框的宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right.html">border-right</a></td>
<td align="left">简写属性，用于把右边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-color.html">border-right-color</a></td>
<td align="left">设置元素的右边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-style.html">border-right-style</a></td>
<td align="left">设置元素的右边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-right-width.html">border-right-width</a></td>
<td align="left">设置元素的右边框的宽度。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top.html">border-top</a></td>
<td align="left">简写属性，用于把上边框的所有属性设置到一个声明中。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-color.html">border-top-color</a></td>
<td align="left">设置元素的上边框的颜色。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-style.html">border-top-style</a></td>
<td align="left">设置元素的上边框的样式。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/pr-border-top-width.html">border-top-width</a></td>
<td align="left">设置元素的上边框的宽度。</td>
</tr>
</tbody></table>
<h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓:outline"></a>轮廓:outline</h3><p><strong>outline</strong>包围在<strong>border</strong>旁边</p>
<p><code>outline: outline-color, outline-style, outline-width</code></p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>outline-color</em></td>
<td align="left">规定边框的颜色。</td>
</tr>
<tr>
<td align="left"><em>outline-style</em></td>
<td align="left">规定边框的样式。</td>
</tr>
<tr>
<td align="left"><em>outline-width</em></td>
<td align="left">规定边框的宽度。</td>
</tr>
<tr>
<td align="left">inherit</td>
<td align="left">规定应该从父元素继承 outline 属性的设置。</td>
</tr>
</tbody></table>
<h3 id="隐藏与显示"><a href="#隐藏与显示" class="headerlink" title="隐藏与显示"></a>隐藏与显示</h3><ul>
<li><code>display:none</code>：占位和本体都消失</li>
<li><code>visibility:hidden</code>：仅本体消失，占位还在</li>
</ul>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul>
<li><code>display:inline</code>：将元素设置为内联元素<ul>
<li>不能修改width、height属性，大小由内容撑开</li>
<li>padding属性 top、right、bottom、left设置都有效；margin属性只有left、right设置有效</li>
</ul>
</li>
<li><code>display:block</code>：将元素设置为块级元素</li>
<li><code>display:inline-block</code>：元素设置为行内块级元素<ul>
<li>共享行</li>
<li>可修改width height</li>
</ul>
</li>
</ul>
<h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><ul>
<li><p><code>static</code>：遵循浏览器本身的规则</p>
</li>
<li><p><code>fixed</code>：固定定位，即使滚动窗口也不动</p>
</li>
<li><p><code>relative</code>：相对定位，相对其<code>static</code>的位置。在定义<code>position:relative</code>后进行位置移动会在其<code>static</code>位置的基础上移动</p>
</li>
<li><p><code>absolute</code>：相对于最近已定位父元素，如果没有， 则相对于<code>&lt;html&gt;</code>元素</p>
</li>
<li><p><code>sticky</code>：粘性定位的元素是依赖于用户的滚动，在 <code>position:relative</code> 与 <code>position:fixed</code> 定位之间切换。</p>
<p>它的行为就像 <code>position:relative</code>页面滚动超出目标区域时，它的表现就像 <code>position:fixed</code>，它会固定在目标位置。</p>
<p>超过某个阈值会变为<code>fixed</code></p>
</li>
</ul>
<h3 id="重叠处理"><a href="#重叠处理" class="headerlink" title="重叠处理"></a>重叠处理</h3><ul>
<li><code>z-index：</code>赋一个数值，越大在z轴方向堆叠越高</li>
</ul>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ul>
<li><code>clear</code>：属性指定元素两侧不能出现浮动元素，避免元素混乱<ul>
<li>both</li>
</ul>
</li>
</ul>
<h3 id="supports"><a href="#supports" class="headerlink" title="@supports"></a>@supports</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 只会在浏览器支持supports（）内的内容时才应用样式*/</span></span><br><span class="line"><span class="keyword">@supports</span>(**)&#123;</span><br><span class="line">	<span class="comment">/*css code */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="继承相关"><a href="#继承相关" class="headerlink" title="继承相关"></a>继承相关</h2><h3 id="不能继承的属性"><a href="#不能继承的属性" class="headerlink" title="不能继承的属性"></a>不能继承的属性</h3><ul>
<li>width</li>
</ul>
<h3 id="控制继承"><a href="#控制继承" class="headerlink" title="控制继承"></a>控制继承</h3><ul>
<li>inherit：强制开启继承</li>
<li>initial：设置为浏览器默认</li>
<li>unset：设置为文档默认</li>
</ul>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">示例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[attr]</code></td>
<td align="left"><code>a[title]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素——方括号里的值。</td>
</tr>
<tr>
<td align="left"><code>[attr=value]</code></td>
<td align="left"><code>a[href=&quot;https://example.com&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值正为<em>value</em>——引号中的字符串。</td>
</tr>
<tr>
<td align="left"><code>[attr~=value]</code></td>
<td align="left"><code>p[class~=&quot;special&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素 ，其值正为<em>value</em>，或者匹配带有一个<em>attr</em>属性的元素，其值有一个或者更多，至少有一个和<em>value</em>匹配。（即可以匹配class=”hello special”类似这样的)</td>
</tr>
<tr>
<td align="left">`[attr</td>
<td align="left">=value]`</td>
<td align="left">`div[lang</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">示例</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>[attr^=value]</code></td>
<td align="left"><code>li[class^=&quot;box-&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值开头为<em>value</em>子字符串。</td>
</tr>
<tr>
<td align="left"><code>[attr$=value]</code></td>
<td align="left"><code>li[class$=&quot;-box&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值结尾为<em>value</em>子字符串</td>
</tr>
<tr>
<td align="left"><code>[attr*=value]</code></td>
<td align="left"><code>li[class*=&quot;box&quot;]</code></td>
<td align="left">匹配带有一个名为<em>attr</em>的属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td>
</tr>
</tbody></table>
<hr>
<ul>
<li><strong><em>i</em></strong> 标记可让浏览器以大小写不敏感的方式检测选择器    </li>
</ul>
<h2 id="单位制度"><a href="#单位制度" class="headerlink" title="单位制度"></a>单位制度</h2><table>
<thead>
<tr>
<th align="left">单位</th>
<th align="left">名称</th>
<th align="left">等价换算</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>cm</code></td>
<td align="left">厘米</td>
<td align="left">1cm = 96px/2.54</td>
</tr>
<tr>
<td align="left"><code>mm</code></td>
<td align="left">毫米</td>
<td align="left">1mm = 1/10th of 1cm</td>
</tr>
<tr>
<td align="left"><code>Q</code></td>
<td align="left">四分之一毫米</td>
<td align="left">1Q = 1/40th of 1cm</td>
</tr>
<tr>
<td align="left"><code>in</code></td>
<td align="left">英寸</td>
<td align="left">1in = 2.54cm = 96px</td>
</tr>
<tr>
<td align="left"><code>pc</code></td>
<td align="left">十二点活字</td>
<td align="left">1pc = 1/16th of 1in</td>
</tr>
<tr>
<td align="left"><code>pt</code></td>
<td align="left">点</td>
<td align="left">1pt = 1/72th of 1in</td>
</tr>
<tr>
<td align="left"><code>px</code></td>
<td align="left">像素</td>
<td align="left">1px = 1/96th of 1in</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">单位</th>
<th align="left">相对于</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>em</code></td>
<td align="left">在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width</td>
</tr>
<tr>
<td align="left"><code>ex</code></td>
<td align="left">字符“x”的高度</td>
</tr>
<tr>
<td align="left"><code>ch</code></td>
<td align="left">数字“0”的宽度</td>
</tr>
<tr>
<td align="left"><code>rem</code></td>
<td align="left">根元素的字体大小</td>
</tr>
<tr>
<td align="left"><code>lh</code></td>
<td align="left">元素的line-height</td>
</tr>
<tr>
<td align="left"><code>vw</code></td>
<td align="left">视窗宽度的1%</td>
</tr>
<tr>
<td align="left"><code>vh</code></td>
<td align="left">视窗高度的1%</td>
</tr>
<tr>
<td align="left"><code>vmin</code></td>
<td align="left">视窗较小尺寸的1%</td>
</tr>
<tr>
<td align="left"><code>vmax</code></td>
<td align="left">视图大尺寸的1%</td>
</tr>
</tbody></table>
<h2 id="布局相关"><a href="#布局相关" class="headerlink" title="布局相关"></a>布局相关</h2><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><p><img src="https://github.com/Exlau/-/blob/main/flex%E5%B8%83%E5%B1%80.png?raw=true" alt="flex总览"></p>
<ul>
<li><strong>主轴（main axis）</strong>是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 <strong>main start</strong> 和 <strong>main end</strong>。</li>
<li><strong>交叉轴（cross axis）</strong>是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 <strong>cross start</strong> 和 <strong>cross end</strong>。</li>
<li>设置了 <code>display: flex</code> 的父元素被称之为 <strong>flex 容器（flex container）。</strong></li>
<li>在 flex 容器中表现为柔性的盒子的元素被称之为 <strong>flex 项</strong>（<strong>flex item</strong>）</li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li><code>flex-direction</code>:（指定主轴方向）<ul>
<li><code>column</code></li>
<li><code>row</code></li>
</ul>
</li>
<li><code>flex-wrap</code>:</li>
<li><code>flex-flow</code>=<code>flex-direction flex-wrap</code></li>
<li><code>flex: num</code>：为每个选项设置相对大小</li>
<li><code>flex-grow</code>：设定多余部分分配比例（无单位）</li>
<li><code>flex-shrink</code>：溢出调整？</li>
<li><code>align-item</code>:  默认的值是 <code>stretch</code>，其会使所有 flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定宽度（即高度），则所有 flex 项将变得与最长的 flex 项一样长（即高度保持一致）。<code>center</code> 值会使这些项保持其原有的高度，但是会在交叉轴居中。这就是那些按钮垂直居中的原因。也可以设置诸如 <code>flex-start</code> 或 <code>flex-end</code> 这样使 flex 项在交叉轴的开始或结束处对齐所有的值。</li>
<li><code>justify-content</code>：<ul>
<li><code>flex-start</code>：默认值，从主轴开始处排列</li>
<li><code>flex-end</code>：排列到主轴末尾</li>
<li><code>center</code>：在主轴居中</li>
<li><code>space-around</code>：均匀分布在主轴</li>
<li><code>space-between</code>：效果同space-around但左右无空隙</li>
</ul>
</li>
</ul>
<h4 id="项排序"><a href="#项排序" class="headerlink" title="项排序"></a>项排序</h4><ul>
<li><code>order</code>：默认值为0，值越大排位越靠后</li>
</ul>
<h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><ul>
<li><p><code>grid-template-columns:num1 ...numN</code>：添加N个宽度为num的列</p>
<ul>
<li><code>repeat(N,w)</code>方法：创建N个w宽的列</li>
</ul>
</li>
<li><p><code>grid-(column)-gap</code>：调整格间隙</p>
</li>
<li><p><code>grid-auto-rows</code>：隐式表格的高</p>
<ul>
<li><code>minmax(min,max)</code>方法：设置最小和最大值</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>CSS备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML备忘</title>
    <url>/2020/10/14/HTML%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML备忘录"><a href="#HTML备忘录" class="headerlink" title="HTML备忘录"></a>HTML备忘录</h1><h2 id="标签相关"><a href="#标签相关" class="headerlink" title="标签相关"></a>标签相关</h2><ul>
<li><p>块级元素自动换行而内联元素不自动换行</p>
</li>
<li><p>disabled = <em>value</em> 无论<em>value</em>值为什么，标签都会处于disabled状态，想要改变需将<em>value</em>置空</p>
</li>
<li><p>特殊字符引用表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">原义字符</th>
<th align="left">等价字符引用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;”</td>
<td align="left">&amp;lt</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">&amp;gt</td>
</tr>
<tr>
<td align="left">“</td>
<td align="left">&amp;quot</td>
</tr>
<tr>
<td align="left">‘</td>
<td align="left">&amp;apos</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">&amp;amp</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li><p>使用相对路径优于绝对路径(舍去了DNS查找等操作)</p>
</li>
<li><p><code>&lt;script&gt;</code>放在<code> &lt;body&gt;</code>末尾前更优，这样可以确保脚本加载前浏览器已经解析HTML内容</p>
</li>
<li><p><code> &lt;a&gt;</code>标签的title属性作为悬停提示</p>
</li>
<li><p>href的mailto subject cc body等关键字，用于发送邮件</p>
</li>
<li><p>描述列表</p>
</li>
<li><p>块引用<code> &lt;blockquote cite=&quot;url&quot;&gt;&lt;/blockquote&gt;</code></p>
</li>
<li><p>行内引用<code>&lt;q cite=&quot;url&quot;&gt;</code></p>
</li>
<li><p>缩略语<code>&lt;abbr title=&quot;..&quot;&gt;&lt;/abbr&gt;</code></p>
</li>
<li><p>保留空格渲染<code>&lt;pre&gt;content&lt;/pre&gt;</code></p>
</li>
<li><p>标记键盘输入<code>&lt;kbd&gt;&lt;/kbd&gt;</code></p>
</li>
<li><p>换行<code>&lt;br&gt;</code></p>
</li>
<li><p>水平线<code>&lt;hr&gt;</code></p>
</li>
<li><p>嵌入其他网页<code>&lt;iframe&gt;</code></p>
<p>属性：</p>
<p>allowfullscreen：可设置全屏</p>
<p>frameborder：边框</p>
<p>（尽量用js设置src）</p>
</li>
<li><p>嵌入PDF,SVG,Flash—<code>&lt;embed&gt;&lt;object&gt;</code></p>
</li>
<li><p>视频标签:<code>&lt;video&gt;</code></p>
<p>属性：</p>
<p>autoplay:自动播放</p>
<p>loop:循环</p>
<p>muted:静音播放</p>
<p>poster:封面图</p>
<p>preload:缓冲（”none”：不缓冲 “auto”：页面加载自动缓冲）</p>
</li>
<li><p>权限管理 sandbox属性</p>
</li>
<li><p>表格相关</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- colgroup 必须包含在table标签内--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">colgroup</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;#&quot;</span> <span class="attr">span</span>=<span class="string">&quot;x&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- col标签可以指定每一行的属性，span是需要设置属性的行数--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- table row --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- table data --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
</li>
</ul>
<h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><ul>
<li><p>```<img>``的 srcset和sizes属性</p>
<p>举例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--srcset是一个文件列表，后面以w为单位的数据是文件的像素大小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg 320w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-480w.jpg 480w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-800w.jpg 800w&quot;</span></span></span><br><span class="line">     &lt;!-- sizes 括号内的是条件 括号外的是前面条件为真时采用的样式--&gt;</span><br><span class="line">     sizes=&quot;(max-width: 320px) 280px,</span><br><span class="line">            (max-width: 480px) 440px,</span><br><span class="line">            800px&quot; <span class="comment">&lt;!--无条件的是默认样式--&gt;</span></span><br><span class="line">     src=&quot;elva-fairy-800w.jpg&quot; alt=&quot;Elva dressed as a fairy&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;picture&gt;</code>的应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​	&#96;&#96;&#96;&lt;soucre&gt;&#96;&#96;&#96;包含media srcset sizes属性</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">&lt;source media&#x3D;&quot;(maxwidth:799px)&quot;srcset&#x3D;&quot;exa.jpg&quot;&gt;</span><br><span class="line">&lt;!--media属性设置一个条件，为真则显示此图片--&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>aaa</p>
]]></content>
      <tags>
        <tag>HTML备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>JS备忘</title>
    <url>/2020/10/21/JS%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><h2 id="一般事件绑定"><a href="#一般事件绑定" class="headerlink" title="一般事件绑定"></a>一般事件绑定</h2><ul>
<li><p><code>.onclick</code>：点击事件</p>
</li>
<li><p><code>.onfocus</code>：聚焦（选中）</p>
</li>
<li><p><code>.onblur</code>：解除聚焦</p>
</li>
<li><p><code>.onmouse(over/out)</code>：鼠标移入/移开</p>
</li>
<li><p><code>.onsubmit</code>：表单提交</p>
</li>
<li><p><code>.addEventListener(&#39;事件&#39;,函数)/removeEventListener(&#39;事件&#39;,函数)</code>：添加/移除，监听事件，可对一个对象的一个事件添加两个不同函数</p>
</li>
</ul>
<h2 id="特殊对象"><a href="#特殊对象" class="headerlink" title="特殊对象"></a>特殊对象</h2><ul>
<li>诸如<code>event evt e（可以是任何表示）</code>都是事件对象会默认传入事件绑定的函数，<code>event/evt/e.target</code>指刚刚发生事件的元素</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li><p><code>Objet().</code>的属性不被继承，而<code>Object.prototype.</code>的属性被继承</p>
</li>
<li><p><code>.call()</code>：这个函数允许您调用一个在这个文件里别处定义的函数。第一个参数指明了在您运行这个函数时想对“<code>this</code>”指定的值，也就是说，您可以重新指定您调用的函数里所有“<code>this</code>”指向的对象。可以让构造器继承某个构造器的属性</p>
</li>
<li><p><code>newObj.prototype = Object.create(Obj.prototype)</code>这串代码使得newObj继承了Obj的方法</p>
</li>
<li><p><code>newObj.prototype.constructor = newObj</code>这使得newObj的prototype和constructior只想的newObj构造器本身，而不是调用call函数的对象的构造器</p>
</li>
<li><p><code>Obj.prototype.constructor===Obj()（构造方法）</code></p>
</li>
</ul>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><strong>纯数据，无函数</strong></p>
<ul>
<li>获取内部成员的方法类似对象</li>
<li><code>.parse()</code>：接收json字符串，返回json对象</li>
<li><code>.stringify()</code>：接收对象，返回json字符串</li>
</ul>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>JS一般是单线程</p>
<p><code>() =&gt; x</code> 是 <code>()=&gt; &#123;return x;&#125;</code> 的有效简写; </p>
<h3 id="callbacks-回调函数"><a href="#callbacks-回调函数" class="headerlink" title="callbacks(回调函数)"></a>callbacks(回调函数)</h3><p>将回调函数作为参数传递给另一个函数仅仅是把回调函数定义作为参数传递过去 — 回调函数并没有立刻执行，回调函数会在包含它的函数的某个地方异步执行，包含函数负责在合适的时候执行回调函数。</p>
<h3 id="promises"><a href="#promises" class="headerlink" title="promises"></a>promises</h3><p>用来表示异步操作成功或者失败的对象</p>
<p>​    有三个状态：</p>
<ul>
<li><p>pending(待定)</p>
</li>
<li><p>resolved(已解决)</p>
<ul>
<li>fullfilled（成功）</li>
<li>rejected（失败）</li>
</ul>
</li>
</ul>
<p><code>promise.all()</code>：传入promise数组，当数组中所有promise执行成功后再执行<code>promise.all()</code>的<code>then</code></p>
<h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><h4 id="setTimeout-和setInterval"><a href="#setTimeout-和setInterval" class="headerlink" title="setTimeout()和setInterval()"></a>setTimeout()和setInterval()</h4><ul>
<li><p><code>setTimeout(func,time)</code>：在一段时间time后执行函数func</p>
<ul>
<li><code>clearTimeout()</code>：清除</li>
</ul>
</li>
<li><p><code>setInterval(func,time)</code>：以固定时间间隔重复运行代码</p>
<ul>
<li><p><code>clearInterval()</code>：清除intervals</p>
</li>
<li><pre><code class="javascript">setTimeout(func,time)
function func()&#123;
    //options-codes;
    setTimeout(func,time);
&#125;
//用递归和setTimeout()实现与setInterval相同的功能</code></pre>
</li>
</ul>
</li>
<li><p><code>setTimeout()</code>严格按照所传入的时间间隔执行，而<code>setInterval()</code>传入的时间间隔则包括代码执行时间和间隔时间(<em>例如传入100ms，代码执行10ms，则实际间隔只有90ms</em>)</p>
</li>
<li><p>使用<strong>0</strong>用作<code>setTimeout()</code>的回调函数会立刻执行，但是在主线程代码运行之后执行。</p>
</li>
</ul>
<h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h4><ul>
<li><code>requestAnimationFrame()</code>：setInterval()的现代版本;在浏览器下一次重新绘制显示之前执行指定的代码块，从而允许动画在适当的帧率下运行，而不管它在什么环境中运行.</li>
<li><code>requestAnimationFrame()</code>:可传入一个带时间戳参数的函数，表示从函数执行到现在的时间</li>
<li><code>cancelAnimationFrame()</code>：用于撤销动画</li>
</ul>
<h3 id="异步API"><a href="#异步API" class="headerlink" title="异步API"></a>异步API</h3><ul>
<li><code>URL.createObjectURL(thing)</code>：此静态方法会创建一个thing的URL</li>
</ul>
<p><strong>fetch</strong></p>
<ul>
<li>全局fetch：<code>fetch(URL).then(func1()).then(func2()).catch(func3(err))</code>：返回一个promise，两个<code>then</code>的参数都是回调函数，如果前一个操作成功则运行该回调函数，并且每个回调函数的参数均是前一个操作的返回值，每个<code>then</code>也会返回一个promise，当任何一个<code>then</code>失败就会运行<code>catch</code></li>
</ul>
<h2 id="APIS"><a href="#APIS" class="headerlink" title="APIS"></a>APIS</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul>
<li>window是载入浏览器的标签，在JavaScript中用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>Window</code></a>对象来表示，使用这个对象的可用方法，你可以返回窗口的大小（参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerWidth"><code>Window.innerWidth</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerHeight"><code>Window.innerHeight</code></a>），操作载入窗口的文档，存储客户端上文档的特殊数据（例如使用本地数据库或其他存储设备），为当前窗口绑定<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#A_series_of_fortunate_events">event handler</a>，等等。</li>
<li>navigator表示浏览器存在于web上的状态和标识（即用户代理）。在JavaScript中，用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator"><code>Navigator</code></a>来表示。你可以用这个对象获取一些信息，比如来自用户摄像头的地理信息、用户偏爱的语言、多媒体流等等。</li>
<li>document（在浏览器中用DOM表示）是载入窗口的实际页面，在JavaScript中用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 对象表示，你可以用这个对象来返回和操作文档中HTML和CSS上的信息。例如获取DOM中一个元素的引用，修改其文本内容，并应用新的样式，创建新的元素并添加为当前元素的子元素，甚至把他们一起删除。<ul>
<li><code>.querySelector()</code>：根据dom规则寻找元素</li>
<li><code>.appendChild()</code>：添加子元素</li>
<li><code>.removeChild()</code>：rm子元素</li>
</ul>
</li>
</ul>
<h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><ul>
<li><code>\d</code>：匹配数字</li>
<li><code>\w</code>：匹配字母</li>
<li><code>.</code>：匹配任意字符</li>
<li><code>*</code>：匹配任意个字符，包括<strong>0</strong>个，<ul>
<li>用**+**来表示至少包含一个字符，</li>
<li><strong>？</strong>来匹配0或者1个字符，</li>
<li>{n}表示n个字符</li>
<li>{n,m}表示n-m个字符</li>
</ul>
</li>
<li><code>\s</code>：匹配空白符</li>
<li><code>[]</code>：表示范围，例如<code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线</li>
<li><code>A|B</code>：匹配A或者B</li>
<li><code>^</code>：表示行的开头<ul>
<li><code>^\d</code>：表示以数字开头</li>
</ul>
</li>
<li><code>$</code>：表示行结束<ul>
<li><code>\d$</code>：表示以数字结束</li>
</ul>
</li>
</ul>
<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2>]]></content>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2020/11/08/HTTP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><p>HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>
</li>
<li><p>HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</p>
</li>
<li><p>HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>
</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="客户端请求"><a href="#客户端请求" class="headerlink" title="客户端请求"></a>客户端请求</h3><ul>
<li>请求行</li>
<li>请求头</li>
<li>空行</li>
<li>请求数据</li>
<li><img src="https://raw.githubusercontent.com/Exlau/imageRep/main/2012072810301161.png?token=ANSYLXZ2FUSDNIU6XG23TF27U56W6" alt="结构图"></li>
</ul>
<h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><p>客户端发出请求后，服务器会先返回一个HTTP状态码<strong>HTTP Status Code</strong></p>
<h4 id="Status-Code"><a href="#Status-Code" class="headerlink" title="Status Code"></a>Status Code</h4><ul>
<li><p>200 - 请求成功</p>
</li>
<li><p>301 - 资源（网页等）被永久转移到其它URL</p>
</li>
<li><p>404 - 请求的资源（网页等）不存在</p>
</li>
<li><p>500 - 内部服务器错误</p>
</li>
<li><p>类别：</p>
<table>
<thead>
<tr>
<th align="left">分类</th>
<th align="left">分类描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1**</td>
<td align="left">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="left">2**</td>
<td align="left">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="left">3**</td>
<td align="left">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="left">4**</td>
<td align="left">客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td align="left">5**</td>
<td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h4><ul>
<li><p>状态行</p>
</li>
<li><p>消息报头</p>
<ul>
<li><table>
<thead>
<tr>
<th align="left">应答头</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Allow</td>
<td align="left">服务器支持哪些请求方法（如GET、POST等）。</td>
</tr>
<tr>
<td align="left">Content-Encoding</td>
<td align="left">文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td>
</tr>
<tr>
<td align="left">Content-Length</td>
<td align="left">表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td>
</tr>
<tr>
<td align="left">Content-Type</td>
<td align="left">表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td>
</tr>
<tr>
<td align="left">Expires</td>
<td align="left">应该在什么时候认为文档已经过期，从而不再缓存它？</td>
</tr>
<tr>
<td align="left">Last-Modified</td>
<td align="left">文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td>
</tr>
<tr>
<td align="left">Location</td>
<td align="left">表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td>
</tr>
<tr>
<td align="left">Refresh</td>
<td align="left">表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a> 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<a href="http://host/path&quot;%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>  注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。  注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td>
</tr>
<tr>
<td align="left">Server</td>
<td align="left">服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td>
</tr>
<tr>
<td align="left">Set-Cookie</td>
<td align="left">设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td>
</tr>
<tr>
<td align="left">WWW-Authenticate</td>
<td align="left">客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>空行</p>
</li>
<li><p>响应正文</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Exlau/imageRep/main/httpmessage.jpg?token=ANSYLX6MVVRDRH66CH7EMQC7U6A4E" alt="结构"></p>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">GET</td>
<td align="left">请求指定的页面信息，并返回实体主体。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">HEAD</td>
<td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">POST</td>
<td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">PUT</td>
<td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">DELETE</td>
<td align="left">请求服务器删除指定的页面。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">CONNECT</td>
<td align="left">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">OPTIONS</td>
<td align="left">允许客户端查看服务器的性能。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">TRACE</td>
<td align="left">回显服务器收到的请求，主要用于测试或诊断。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">PATCH</td>
<td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>整理自菜鸟教程</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC相关</title>
    <url>/2020/10/21/RPC%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">graph LR</span><br><span class="line">本地--&gt;|要执行的函数与函数参数|服务端</span><br><span class="line">服务端--&gt;|通过回调函数传回函数结果|本地</span><br></pre></td></tr></table></figure>

<p>以上传参过程均通过AJAX</p>
<h1 id="传输的数据"><a href="#传输的数据" class="headerlink" title="传输的数据"></a>传输的数据</h1><p><strong>本地：服务端的函数与函数参数</strong></p>
<p><strong>服务端：回调执行结果</strong></p>
<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>将JSON序列化为PHP形式</p>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>RPC(Remote Procedure Call)指的是远程过程调用，简单的说，RPC就是从一台机器上通过参数传递的方式调用另一台机器上的一个函数或方法并得到响应结果。</p>
<p>即本地来调用远程计算机上的某个函数</p>
<p>我们不用关心RPC的通讯细节只需要使用上层接口</p>
]]></content>
  </entry>
  <entry>
    <title>ReadME!!</title>
    <url>/2220/09/20/ReadME!!!/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>欢迎访问！</li>
<li>第一次加载文章首页图可能很慢。。。</li>
<li>如要评论文章，请先填写昵称和邮箱（这两者为必要填写项）</li>
</ul>
]]></content>
      <tags>
        <tag>Hello!</tag>
      </tags>
  </entry>
  <entry>
    <title>java相关</title>
    <url>/2020/12/03/java%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>Java定义了一种名字空间，称之为包：<code>package</code>。一个类总是属于某个包，类名（比如<code>Person</code>）只是一个简写，真正的完整类名是<code>包名.类名</code>。</p>
<p>包作用域是指一个类允许访问同一个<code>package</code>的没有<code>public</code>、<code>private</code>修饰的<code>class</code>，以及没有<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法。</p>
<h1 id="关键字作用域"><a href="#关键字作用域" class="headerlink" title="关键字作用域"></a>关键字作用域</h1><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><ul>
<li>class,interface可被其他任何class访问</li>
<li>class内部定义的字段必须要先有此class的访问权限才能访问</li>
</ul>
<p>**PS:**如果不确定是否需要<code>public</code>，就不声明为<code>public</code>，即尽可能少地暴露对外的字段和方法。</p>
<h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><ul>
<li><p>无法被其他类访问</p>
</li>
<li><p>可以被定义private字段的class的内部class访问</p>
</li>
</ul>
<h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><p><code>protected</code>作用于继承关系。定义为<code>protected</code>的字段和方法可以被子类访问，以及子类的子类</p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul>
<li><p>作用于class阻止class被继承</p>
</li>
<li><p>作用于class内的方法阻止方法被子类覆写</p>
</li>
<li><p>作用于变量阻止被重新赋值</p>
</li>
</ul>
<h1 id="classpath和jar"><a href="#classpath和jar" class="headerlink" title="classpath和jar"></a>classpath和jar</h1><p><code>classpath</code>是JVM用到的一个环境变量，它用来指示JVM如何搜索<code>class</code></p>
<p>假设<code>classpath</code>是<code>.;C:\work\project1\bin;C:\shared</code>，当JVM在加载<code>abc.xyz.Hello</code>这个类时，会依次查找：</p>
<ul>
<li>&lt;当前目录&gt;\abc\xyz\Hello.class</li>
<li>C:\work\project1\bin\abc\xyz\Hello.class</li>
<li>C:\shared\abc\xyz\Hello.class</li>
</ul>
<p>在启动JVM时设置<code>classpath</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -classpath .;C:\work\project1\bin;C:\shared abc.xyz.Hello</span><br><span class="line"></span><br><span class="line">java -cp .;C:\work\project1\bin;C:\shared abc.xyz.Hello</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>mySQL基础</title>
    <url>/2020/11/30/mySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <tags>
        <tag>password</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL相关</title>
    <url>/2020/09/19/mysql%E7%9B%B8%E5%85%B3(building)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL-（building）"><a href="#MySQL-（building）" class="headerlink" title="MySQL!（building）"></a>MySQL!（building）</h1><h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --console</span><br><span class="line">&#x2F;&#x2F;启动</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot shutdown</span><br><span class="line">&#x2F;&#x2F;关闭</span><br></pre></td></tr></table></figure>

<h2 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h2><p>添加用户的的实例，用户名为guest，密码为guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO user </span><br><span class="line">          (host, user, password, </span><br><span class="line">           select_priv, insert_priv, update_priv) </span><br><span class="line">           VALUES (&#39;localhost&#39;, &#39;guest&#39;, </span><br><span class="line">           PASSWORD(&#39;guest123&#39;), &#39;Y&#39;, &#39;Y&#39;, &#39;Y&#39;);</span><br><span class="line">Query OK, 1 row affected (0.20 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT host, user, password FROM user WHERE user &#x3D; &#39;guest&#39;;</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| host      | user    | password         |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| localhost | guest | 6f8c114b58f2ce9e |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>《关掉》</title>
    <url>/2020/10/16/%E3%80%8A%E5%85%B3%E6%8E%89%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    关掉！关掉！一定要关掉！再不关掉那些网络游戏，小孩哪有美好的未来？哪有美好的前程？祖国哪有</p>
<h1 id="栋"><a href="#栋" class="headerlink" title="栋"></a>栋</h1><p>梁之才？</p>
<iframe src="//player.bilibili.com/player.html?aid=457253380&bvid=BV1s5411j7Po&cid=242488467&page=1" width="800px" height="450px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" auto="1"> </iframe>]]></content>
      <tags>
        <tag>关掉</tag>
      </tags>
  </entry>
  <entry>
    <title>很快啊</title>
    <url>/2020/11/08/%E5%BE%88%E5%BF%AB%E5%95%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>马老师发生甚么事了</p>
<p>我说怎么回事</p>
<p>给我发来几张截图</p>
<p>我一看，哦！原来是佐田</p>
<iframe src="//player.bilibili.com/player.html?aid=82179137&bvid=BV1HJ411L7DP&cid=140610898&page=1" scrolling="no" border="0" frameborder="no"
height = "450px" width="800px"framespacing="0" allowfullscreen="true" auto = "1"> </iframe>]]></content>
      <tags>
        <tag>我大意了啊，没有闪</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue相关</title>
    <url>/2020/12/14/Vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul>
<li>创建组件构造器 </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cpN = Vue.extend(&#123;</span><br><span class="line">	template:<span class="string">&#x27;HTMLCODE&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>注册组件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;cpn&#x27;</span>,cpN)</span><br></pre></td></tr></table></figure>

<ul>
<li>组件使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h2><ul>
<li>Vue实例外注册的组件是全局组件</li>
<li>Vue实例内注册的组件为局部组件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部组件注册</span></span><br><span class="line">component:&#123;</span><br><span class="line">	cpn: cpN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cpn2 = Vue.extend(&#123;</span><br><span class="line">	template:<span class="string">`HTML CODE`</span>,</span><br><span class="line">&#125;)<span class="comment">//子组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cpn1 = Vue.extend(&#123;</span><br><span class="line">	template:<span class="string">`HTML CODE</span></span><br><span class="line"><span class="string">				&lt;cpn&gt;&lt;/cpn&gt;`</span>,</span><br><span class="line"><span class="comment">//这里的cpn是cpn2在cpn1内注册的组件</span></span><br><span class="line">	components:&#123;</span><br><span class="line">		cpn: cpn2</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;)<span class="comment">//父组件</span></span><br></pre></td></tr></table></figure>

<p><strong><em>注意：**</em></strong>cpn2因未在全局注册，所以仅能在cpn1中调用，不能在Vue挂载的部分使用**</p>
<hr>
<h2 id="更推荐的组件创建方式"><a href="#更推荐的组件创建方式" class="headerlink" title="更推荐的组件创建方式"></a>更推荐的组件创建方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;cpn1&#x27;</span>,&#123;</span><br><span class="line">	template: <span class="string">`HTML CODE`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="HTML-CODE分离写法"><a href="#HTML-CODE分离写法" class="headerlink" title="HTML CODE分离写法"></a><code>HTML CODE</code>分离写法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scriprt</span> <span class="attr">type</span>=<span class="string">&#x27;text/x-template&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span></span><br><span class="line">	SOME HTML CODE</span><br><span class="line"><span class="tag">&lt;/<span class="name">scriprt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Vue.component(&#x27;cpn&#x27;&#123;</span><br><span class="line">	template: &#x27;#cpn&#x27;,</span><br><span class="line">	//这里的template的内容即是<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>标签里的&#x27;SOME HTML CODE&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>OR</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn  &#x27;</span>&gt;</span></span><br><span class="line">	SOME HTML CODE</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Vue.component(&#x27;cpn&#x27;&#123;</span><br><span class="line">	template: &#x27;#cpn&#x27;,</span><br><span class="line">	//这里的template的内容即是<span class="tag">&lt;<span class="name">template</span>&gt;</span>标签里的&#x27;SOME HTML CODE&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="组件访问数据的范围"><a href="#组件访问数据的范围" class="headerlink" title="组件访问数据的范围"></a>组件访问数据的范围</h2><ul>
<li>组件不能直接访问Vue实例的data</li>
</ul>
<p><code>component</code>内也有data选项，<strong>但是data选项应该是一个返回对象的函数而不是对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;cpn&#x27;</span>,&#123;</span><br><span class="line">	template: <span class="string">`HTML CODE`</span>,</span><br><span class="line">	data()&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="number">2</span>,</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>为什么data不能是对象？？</p>
<p>​    因为当有多个组件实例时，若data是对象则多个实例会共享data里的值，而将data设计为函数，每次实例化组件时都会为当前组件调用data函数返回一个对象，与其余实例不共享。所以在设计Vue的时候才会这样设计，强行写为对象会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">example()&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		value:<span class="number">1</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = example();</span><br><span class="line"><span class="keyword">const</span> b = example(); <span class="comment">//每次实例化都创建一个新的对象，a,b地址不同</span></span><br><span class="line">b.value = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//此时a.value = 1; b.value = 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	value:<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">example()&#123;</span><br><span class="line">	<span class="keyword">return</span> obj; <span class="comment">//return的是obj的地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a  = example();</span><br><span class="line"><span class="keyword">const</span> b = example();</span><br><span class="line">b.value = <span class="number">2</span>;</span><br><span class="line">a.value == b.value <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>通过<code>props</code>属性传递，<code>props</code>可以是数组也可以是对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:Cmessage</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span><span class="comment">&lt;!--绑定VM实例下的message到cpn的props下的Cmessage--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span>&#123;&#123;Cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//props:[&#x27;Cmessage&#x27;] //数组写法</span></span></span><br><span class="line">        props:&#123; </span><br><span class="line"><span class="javascript">        	<span class="comment">//Cmessage: String, //这里的String是对Cmessage进行类型限制，必须为String</span></span></span><br><span class="line"><span class="javascript">  			<span class="comment">//这是完整写法，为一个对象</span></span></span><br><span class="line">            Cmessage:&#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="string">&#x27;default value&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">require</span>: <span class="comment">//这里填一个Boolean，表示组件创建时此值是不是必须的</span></span></span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">   	<span class="comment">//父组件</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">const</span> VM = <span class="keyword">new</span>  Vue()&#123;</span></span><br><span class="line"><span class="javascript">		el:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">    	data:&#123;</span><br><span class="line"><span class="javascript">        	message: <span class="string">&#x27;this is a message&#x27;</span></span></span><br><span class="line">    	&#125;,</span><br><span class="line">    	components: &#123;</span><br><span class="line">			cpn: cpn</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong><em>注意：**</em></strong><code>props</code>的验证还可以自定义**</p>
<h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>通过自定义事件</p>
<p>$emit(‘event-name’,props)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:Cmessage</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;clicked(Cmessage)&#x27;</span>&gt;</span> //点击事件发生主席那个clicked并以Cmessage作为参数</span><br><span class="line">	emit click</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line">        props:&#123; </span><br><span class="line">            Cmessage:&#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="string">&#x27;Cmessage &#x27;</span></span></span><br><span class="line">            &#125; </span><br><span class="line">    	&#125;</span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                </span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">         methods:&#123;</span><br><span class="line">          	clicked(Cmessage)&#123;           </span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;cpn-click&#x27;</span>Cmessage)<span class="comment">//发射cpn-click事件到父组件，并传Cmessage</span></span></span><br><span class="line">            &#125;   </span><br><span class="line">         &#125;        </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">//父组件</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">const</span> VM = <span class="keyword">new</span>  Vue()&#123;</span></span><br><span class="line"><span class="javascript">		el:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">    	data:&#123;</span><br><span class="line"><span class="javascript">        	message: <span class="string">&#x27;this is a message&#x27;</span></span></span><br><span class="line">    	&#125;,</span><br><span class="line">    	components: &#123;</span><br><span class="line">			cpn: cpn</span><br><span class="line">    	&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            cpn-click(Cmessage)&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(Cmessage);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><strong>this.$children</strong>可以获取this（Vue实例）的子组件数组通过下标来查询具体某一项组件（不推荐这种方式）</p>
<p><strong>$refs</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&#x27;a&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span>//若有一个组件像这样添加了refs属性</span><br><span class="line"></span><br><span class="line">this.$refs.a//则可以这样来获取此组件</span><br></pre></td></tr></table></figure>

<p><strong>$parent</strong>可以获取组件的父组件</p>
<p><strong>$root</strong>可以访问根组件</p>
<h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><ul>
<li>slot定义</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&#x27;cpn&#x27;</span>&gt;</span></span><br><span class="line">	HTMLCODE</span><br><span class="line">	<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;slot&gt;&lt;p&gt;default value&lt;/p&gt;&lt;/slot&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插槽还可以具有默认值,手动赋值会覆盖此默认值--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里为cpn组件预留了一个slot插槽</p>
<ul>
<li>插槽使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">//这里把slot替换为了一个button</span><br></pre></td></tr></table></figure>

<h3 id="slot的name"><a href="#slot的name" class="headerlink" title="slot的name"></a>slot的name</h3><p>默认替换的是无name属性的插槽</p>
<p>若要选定某name的插槽,则需要</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>组件组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>left<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>center<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>right<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span>left will be cover<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>想要把子组件的数据传到父组件进行显示，如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--以下方式是无法取到cpn里的things的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in things&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!---------------------------------------------&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要想完成上述目标则需要如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">slot</span> <span class="attr">:things</span> = <span class="string">&#x27;things&#x27;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里的:things可以是任何自定标识符--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">slot-scope</span> = <span class="string">&#x27;slot&#x27;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里的&#x27;slot&#x27;也是可以自定义的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in slot.things&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">	el:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">	data:&#123;&#125;,</span><br><span class="line">	components:&#123;</span><br><span class="line">		cpn:&#123;</span><br><span class="line">			template:</span><br><span class="line">			data()&#123;</span><br><span class="line"><span class="javascript">				things:[<span class="string">&#x27;thing1&#x27;</span>,<span class="string">&#x27;thing2&#x27;</span>].</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>看下面的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>app.isShow<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;isShow&#x27;</span>&gt;</span>cpn.isShow<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-show</span>=<span class="string">&#x27;isShow&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">	el:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">	data:&#123;</span><br><span class="line"><span class="javascript">		isShow:<span class="literal">true</span>,</span></span><br><span class="line">	&#125;,</span><br><span class="line">	components:&#123;</span><br><span class="line">		tempalte: ,</span><br><span class="line">		data()&#123;</span><br><span class="line"><span class="javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">				isShow:<span class="literal">false</span>,</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//cpn的v-show会绑定到Vue实例app的isShow</span><br><span class="line">//cpn内的div的v-show会绑定到cpn的isShow</span><br></pre></td></tr></table></figure>

<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="为什么需要模块化？"><a href="#为什么需要模块化？" class="headerlink" title="为什么需要模块化？"></a>为什么需要模块化？</h2><p>为了避免同一个项目下各个文件中变量作用域冲突造成的奇怪问题和节省开发成本</p>
<p>老旧的做法是使用匿名函数和模块导出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mouduleA = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num1+num2;</span><br><span class="line">	&#125;</span><br><span class="line">	obj.flag = flag;</span><br><span class="line">	obj.sum = sum;</span><br><span class="line">	<span class="keyword">return</span> obj</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//现在mouduleA为obj,可以在其他js文件中通过mouduleA.flag和moduleA.sum(num1,num2)来调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>常用的模块化规范：</strong></p>
<ul>
<li>CommonJS(node.js)</li>
<li>AMD</li>
<li>CMD</li>
<li>Modules</li>
</ul>
<h2 id="CommonJS做法"><a href="#CommonJS做法" class="headerlink" title="CommonJS做法"></a>CommonJS做法</h2><p><strong>node环境下</strong></p>
<ul>
<li>导出</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个名为moduleA.js的文件</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	flag, <span class="comment">//也可以写成flag:flag,</span></span><br><span class="line">	sum,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>导入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;moduleA.js&#x27;</span>)</span><br><span class="line"><span class="comment">//现在可以通过mouduleA.flag和moduleA.sum()来获取</span></span><br></pre></td></tr></table></figure>

<h2 id="ES6做法"><a href="#ES6做法" class="headerlink" title="ES6做法"></a>ES6做法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;moduleA.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&gt;&lt;/script&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;!--规定type=&quot;</span><span class="attr">module</span>&quot;后，每个<span class="attr">js</span>文件都有单独的空间，其余<span class="attr">js</span>文件不得直接访问，需要导出<span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>导出</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个名叫moduleA.js的文件</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span>&#123;flag,sum&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>导入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;flag,sum&#125; <span class="keyword">from</span> <span class="string">&quot;moduleA.js&quot;</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mouduleA（别名） <span class="keyword">from</span> <span class="string">&#x27;moduleA.js&#x27;</span></span><br><span class="line"><span class="comment">//这样可以通过mouduleA.flag来取得变量</span></span><br></pre></td></tr></table></figure>

<h3 id="PS-export-default"><a href="#PS-export-default" class="headerlink" title="PS(export default)"></a>PS(export default)</h3><ul>
<li>导出</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//moduleA.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> flag</span><br><span class="line"><span class="comment">//export default 只能导出一项</span></span><br></pre></td></tr></table></figure>

<ul>
<li>导入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> f <span class="keyword">from</span> <span class="string">&#x27;moduleA.js&#x27;</span></span><br><span class="line"><span class="comment">//这里的f就是moduleA.js中的flag</span></span><br></pre></td></tr></table></figure>

<h1 id="Webpack与node"><a href="#Webpack与node" class="headerlink" title="Webpack与node"></a>Webpack与node</h1><p> 前端模块化打包工具</p>
<p>webpack依赖node环境</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装webpack</span></span><br><span class="line">npm init</span><br><span class="line">npm install （--save-dev） webpack@版本号 -g</span><br><span class="line"><span class="comment">//--save-dev 是本地安装webpack命令</span></span><br></pre></td></tr></table></figure>



<h2 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h2><p>创建一个**<em>webpack.config.js**</em>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js内容</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">//导入node中的path</span></span><br><span class="line"></span><br><span class="line">moudule.exports=&#123;</span><br><span class="line">    <span class="comment">//表示打包的入口文件</span></span><br><span class="line">    entry: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">    <span class="comment">//表示打包形成的目标文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">    	path: path.reslove(__dirname，<span class="string">&#x27;dist&#x27;</span>), <span class="comment">//path必须是绝对路径，这里动态获取__dirname是node里获取当前路径的常量</span></span><br><span class="line">    	filename:<span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;meetwebpack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">      <span class="comment">//创建npm run bulid 和webpack命令的映射</span></span><br><span class="line">     <span class="attr">&quot;bulid&quot;</span>: <span class="string">&quot;webpack&quot;</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若在命令行键入npm run bulid则等效于键入webpack命令</span></span><br><span class="line"><span class="comment">//并且优先在本地webpack中(./node_modules/bin)找命令 </span></span><br></pre></td></tr></table></figure>

<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><h3 id="npm安装loader-以css为例"><a href="#npm安装loader-以css为例" class="headerlink" title="npm安装loader(以css为例)"></a>npm安装loader(以css为例)</h3><ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install --save-dev style-loader</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<p>在webpack.config.js中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;新添加module对象，如下</span><br><span class="line">module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">            test: &#x2F;\.css$&#x2F;,</span><br><span class="line">            use: [&#39;style-loader&#39;, &#39;css-loader&#39;]</span><br><span class="line">            &#x2F;&#x2F;css-loader负责解析加载css</span><br><span class="line">            &#x2F;&#x2F;style-loader负责提交css到DOM上</span><br><span class="line">        	&#125;</span><br><span class="line">           	  ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>**注意:**有时候css-loader与style-loader的版本过高或者过低会出现问题，这时候在package.json里手动调低或者调高版本号即可</p>
<h3 id="图片loader"><a href="#图片loader" class="headerlink" title="图片loader"></a>图片loader</h3><ul>
<li>安装url-loader</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></table></figure>

<ul>
<li>webpack.config.js配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line"><span class="comment">//当加载的图片小于limit的字节数，图片url会被编译称base64字符串形式</span></span><br><span class="line"><span class="comment">//如果大于limt则会通过file-loader来编译，file-loader不需要特别配置</span></span><br><span class="line">              limit: <span class="number">8192</span>,</span><br><span class="line"><span class="comment">//name是指通过file-loader生成的图片打包在dist下的img文件夹且命名为:原文件名+8位hash值+扩展名</span></span><br><span class="line">              name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file-loader安装</span></span><br><span class="line">npm install --save-dev file-loader@版本号 </span><br></pre></td></tr></table></figure>

<p>注:**通过file-loader加载图片，路径会在output中path所指的文件夹中，</p>
<p>​    若html入口程序不在dist则浏览器无法正确找到</p>
<p>​    需要在webpack.config.js的output中修改配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicPath: <span class="string">&#x27;dist/&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="ES6转ES5"><a href="#ES6转ES5" class="headerlink" title="ES6转ES5"></a>ES6转ES5</h3><ul>
<li><strong>工具: babel</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装，这是一个旧版的babel</span></span><br><span class="line">npm install --save-dev babel-loader@<span class="number">7</span> babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="comment">// exclude是写入不进行转换操作的文件夹</span></span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="wepack配置Vue"><a href="#wepack配置Vue" class="headerlink" title="wepack配置Vue"></a>wepack配置Vue</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install vue</span><br></pre></td></tr></table></figure>

<ul>
<li>引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//这里会直接在node_modules里找vue</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>需要在webpack.config.js中配置下面这一段代码来处理runtime-only和runtime-compiler的问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line"><span class="comment">//这里设置了import Vue from &#x27;vue&#x27;时vue的寻找路径，包含了runtime-compiler</span></span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>runtime-only不能编译vue模板</p>
<p>runtime-compiler可以编译</p>
<h2 id="Vue如何简化开发"><a href="#Vue如何简化开发" class="headerlink" title="Vue如何简化开发"></a>Vue如何简化开发</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">	template:<span class="string">`</span></span><br><span class="line"><span class="string">	&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">	`</span>,</span><br><span class="line">	data&#123;</span><br><span class="line">		message:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">//这里Vue会把template的内容直接拷贝到挂载的html文档上</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>第一种开发方式</li>
</ul>
<p>在vue实例内写html模板</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&#x27;btnclick&#x27;&gt;click&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;EE&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        btnClick() &#123;</span><br><span class="line">            alert(<span class="string">&#x27;click??&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种开发方式</li>
</ul>
<p>在组件内写html模板把此组件作为Vue实例的子组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">    template: <span class="string">` </span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&#x27;btnClick&#x27;&gt;click&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;EE&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        btnClick() &#123;</span><br><span class="line">            alert(<span class="string">&#x27;click??&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    template: <span class="string">`&lt;App/&gt;`</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        App,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>第三种方式</li>
</ul>
<p>把组件抽离成一个单独的js文件后导出，再在main.js中引入此组件即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"> <span class="keyword">const</span> App = &#123;</span><br><span class="line">     template: <span class="string">` </span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&#x27;btnClick&#x27;&gt;click&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">     data() &#123;</span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">             message: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">             name: <span class="string">&#x27;EE&#x27;</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">         btnClick() &#123;</span><br><span class="line">             alert(<span class="string">&#x27;click??&#x27;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./src/js/vue/app.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    template: <span class="string">`&lt;App/&gt;`</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        App,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>第四种开发方式</li>
</ul>
<p>创建.vue文件,将组件的模板，js代码，样式整合到vue文件中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//app.vue</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;btnClick&#x27;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">             message: <span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="javascript">             name: <span class="string">&#x27;EE&#x27;</span></span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">         btnClick() &#123;</span><br><span class="line"><span class="javascript">             alert(<span class="string">&#x27;click??&#x27;</span>);</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.title</span>&#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./src/js/vue/app.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    template: <span class="string">`&lt;App/&gt;`</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        App,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>需要安装vue-loader vue-template-compiler</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-loader@15.4.2 vue-template-compiler@2.5.21 --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">    use: [<span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><h3 id="添加一个版权提示插件"><a href="#添加一个版权提示插件" class="headerlink" title="添加一个版权提示插件"></a>添加一个版权提示插件</h3><p>BannerPlugin是webpack自带的所以不用另外下载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	plugins:[</span><br><span class="line">		<span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&quot;最终解释权归EE所有&quot;</span>)</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><p>生成index.html到dist</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line">	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template:<span class="string">&#x27;index.html&#x27;</span><span class="comment">//根据index.html为模板生成</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="JS压缩插件"><a href="#JS压缩插件" class="headerlink" title="JS压缩插件"></a>JS压缩插件</h3><ul>
<li>安装</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line">plugins:&#123;</span><br><span class="line">    <span class="keyword">new</span> UgilifyjsWebpackPlugin()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="本地node服务器"><a href="#本地node服务器" class="headerlink" title="本地node服务器"></a>本地node服务器</h2><p>本地内存启用服务器，加快调试速度</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npn install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">devServer:&#123;</span><br><span class="line">	contentBase:<span class="string">&#x27;./dist&#x27;</span>,<span class="comment">//选定服务dist文件夹</span></span><br><span class="line">    inline:<span class="literal">true</span>,<span class="comment">//实时监听</span></span><br><span class="line">    port:<span class="comment">//端口号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">	<span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack-dev-server --open&quot;</span><span class="comment">//映射到dev</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="webpack开发时配置和发布时配置分离"><a href="#webpack开发时配置和发布时配置分离" class="headerlink" title="webpack开发时配置和发布时配置分离"></a>webpack开发时配置和发布时配置分离</h2><p>生产和开发时的配置大多数时都不相同，把不同时期的配置文件分开管理是一个比较好的做法</p>
<p>项目根目录下建立文件夹config,包含一下三个文件</p>
<p>**base.config.js:**基础配置</p>
<p><strong>dev.config.js</strong>开发时配置</p>
<p><strong>prod.config.js</strong>生产打包配置</p>
<ul>
<li>安装webpack-merge</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dev.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config.js&#x27;</span>)<span class="comment">//拿到base.config.js的内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig,&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        ...<span class="comment">//开发时需要的plugins</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prod.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config.js&#x27;</span>)<span class="comment">//拿到base.config.js的内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig,&#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        ...<span class="comment">//生产打包需要的plugins</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>我们需要重新指定package.json里的script项才能使得命令绑定且使用我们想要的配置文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">	<span class="string">&quot;bulid&quot;</span>: <span class="string">&quot;webpack --config ./bulid/prod.config.js&quot;</span>,</span><br><span class="line">	<span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack-dev-server --open --config ./bulid/dev.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行打包</strong></p>
<p>​    发现打包的文件夹dist放在了当前config目录下</p>
<p>修改base.config.js下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br></pre></td></tr></table></figure>

<h1 id="Vue-CLI-version-3"><a href="#Vue-CLI-version-3" class="headerlink" title="Vue CLI(version-3)"></a>Vue CLI(version-3)</h1><p>快速生成Vue开发环境，自动配置webpack</p>
<h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="CLI安装"><a href="#CLI安装" class="headerlink" title="CLI安装"></a>CLI安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli@版本号vue -v</span><br></pre></td></tr></table></figure>

<h2 id="VueCLI-version-2"><a href="#VueCLI-version-2" class="headerlink" title="VueCLI(version-2)"></a>VueCLI(version-2)</h2><ul>
<li>创建项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack 项目名</span><br></pre></td></tr></table></figure>

<ul>
<li>流程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Project name (项目名)</span><br><span class="line">Project description  &#x2F;&#x2F;项目描述</span><br><span class="line">Author &#x2F;&#x2F;作者</span><br><span class="line"></span><br><span class="line">Runtime + Compiler:</span><br><span class="line">Runtime-only:</span><br><span class="line"></span><br><span class="line">Install vue-router?</span><br><span class="line">Use ESlint to lint your code?  &#x2F;&#x2F;检查代码规范</span><br><span class="line">Set up unit tests              &#x2F;&#x2F;单元测试</span><br><span class="line">Setup e2e tests with Nightwatch &#x2F;&#x2F;依赖Nightwatch的端到端测试</span><br></pre></td></tr></table></figure>

<h2 id="runtimeonly"><a href="#runtimeonly" class="headerlink" title="runtimeonly"></a>runtimeonly</h2><p>此版下vue工作流程</p>
<p>render -&gt; virtual dom -&gt;DOM</p>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p><code>template</code>会被解析为render</p>
<p>.vue文件会被解析为render可处理的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">creatElement</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> createElement(<span class="string">&#x27;h2&#x27;</span>,</span><br><span class="line">          &#123;<span class="attr">class</span>:<span class="string">&#x27;box&#x27;</span>&#125;,</span><br><span class="line">          [<span class="string">&#x27;content&#x27;</span>,createElement(<span class="string">&#x27;button&#x27;</span>,[button])]         )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个render将创建一个</span></span><br><span class="line"><span class="comment">//&lt;h2 class=&#x27;box&#x27;&gt;content&lt;button&gt;button&lt;/button&gt;&lt;/h2&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>传入组件对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cpn = &#123;</span><br><span class="line">	template:<span class="string">&#x27;&lt;div&gt;hello &#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            message:ee</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params">creatElement</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> creatElement(cpn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="runtime-compiler"><a href="#runtime-compiler" class="headerlink" title="runtime + compiler"></a>runtime + compiler</h2><p>此版下vue工作流程</p>
<p>template -&gt; ast -&gt; render -&gt; virtual dom -&gt;DOM</p>
<h2 id="ES6箭头函数"><a href="#ES6箭头函数" class="headerlink" title="ES6箭头函数"></a>ES6箭头函数</h2><p>多用于将函数作为参数传入时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传统函数</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">num</span>) =&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单个参数简写"><a href="#单个参数简写" class="headerlink" title="单个参数简写"></a>单个参数简写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般箭头函数</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">num</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num*num</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//省略后</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">num</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num*num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="仅一行代码时简写"><a href="#仅一行代码时简写" class="headerlink" title="仅一行代码时简写"></a>仅一行代码时简写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般写法</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">num</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num*num</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//省略写法</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">num</span>) =&gt;</span> num*num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------无返回值时--------------//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一般写法</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">num</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num) </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function">(<span class="params">num</span>) =&gt;</span> <span class="built_in">console</span>.log(num)</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数中this的指向问题"><a href="#箭头函数中this的指向问题" class="headerlink" title="箭头函数中this的指向问题"></a>箭头函数中this的指向问题</h3><h1 id="VUE-router"><a href="#VUE-router" class="headerlink" title="VUE-router"></a>VUE-router</h1><h2 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h2><p>由后端处理URL和HTML文档的映射关系</p>
<h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>后端只提供数据，前端请求后端数据并展示</p>
<h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>SPA页面</p>
<p>仅一个静态资源(html css js) 页面</p>
<p>根据用户意愿来抽离出静态资源的某部分来展示</p>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save vue-router</span><br></pre></td></tr></table></figure>

<p>**PS:**CLI创建时可自动安装</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><p>src下创建router文件夹</p>
</li>
<li><p>router下创建一个index.js</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="comment">//配置路径和组件的映射关系</span></span><br><span class="line">  routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="comment">//重定向默认网页到首页home</span></span><br><span class="line">        redirect:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27; &#x27;</span>,</span><br><span class="line">        component:</span><br><span class="line">    &#125;</span><br><span class="line">  ]，</span><br><span class="line">    <span class="comment">//将路由模式选择为history模式</span></span><br><span class="line">    mode:<span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index.js&#x27;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	router: router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>router-link</li>
<li>router-view</li>
</ul>
<p>在根vue组件的template中添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--router-link会渲染为通向to的&lt;a&gt;&lt;/a&gt;标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/home1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/home2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/home3&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--router-view用来显示所指向的组件内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="router-link详解"><a href="#router-link详解" class="headerlink" title="router-link详解"></a>router-link详解</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">tag</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">replace</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">to属性:指明路由到的地址</span></span><br><span class="line"><span class="comment">tag属性:指明router-link渲染为什么标签，默认为&lt;a&gt;</span></span><br><span class="line"><span class="comment">replace:有此属性表示为replace模式路由</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--被点击后，渲染后的标签会添加一个class--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="手动router-link"><a href="#手动router-link" class="headerlink" title="手动router-link"></a>手动router-link</h4><p>通过监听点击事件，执行<code>this.$router.push(&#39;/home&#39;)</code>或者<code>this.$router.replace(&#39;/home&#39;)</code></p>
<p><strong>$router</strong>是vue默认添加的一个数据 </p>
<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>例：一个用户名为EE，userID：EE9696</p>
<p>我们要进入这个user的页面 即：<code>(/user/EE96966)</code>就需要动态路由</p>
<p>并且我们需要把此user 的ID：EE展示在其页面上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line">route:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//动态绑定userid router-link的to会覆盖此属性</span></span><br><span class="line">        path:user/:userid </span><br><span class="line">        <span class="comment">//当然使用user.vue前需要import</span></span><br><span class="line">        component: user </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--App.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&#x27;finalID-path&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name:<span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                name:EE    <span class="comment">//userName</span></span></span><br><span class="line"><span class="javascript">                ID:EE9696, <span class="comment">//需要的用户ID</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//得到finalID=/user/EE9696</span></span></span><br><span class="line">            finalID()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="string">&#x27;/user/&#x27;</span>+<span class="built_in">this</span>.ID</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="route与与展示ID"><a href="#route与与展示ID" class="headerlink" title="$route与与展示ID"></a>$route与与展示ID</h4><p><strong>$route</strong>拿到的是当前活跃的路由</p>
<p>​    注意与**$router<strong>区别:</strong>$router**拿到的是router对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--user.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            ID:&#123;&#123;userID&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line">        computed:&#123;</span><br><span class="line">            userID()&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//this.$route指当前活跃的路由</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//params指参数</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//userID是配置路由时route的动态path--:userID</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.$route.params.userID</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>将所有业务代码打包到同一个js文件在网站加载时会非常慢</p>
<p>把不同路由对应的组件封装到不同的js中，这样在需要时再加载会提高效率，即路由的懒加载</p>
<p><strong>使用方法</strong></p>
<ul>
<li>传统的配置方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;../component/home.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component:<span class="string">&#x27;home&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>懒加载配置方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component:<span class="function">()=&gt;</span> <span class="keyword">import</span>(../component/home.vue)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//你也可以这样写</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(../component/home.vue)</span><br><span class="line"><span class="keyword">const</span> routes =[</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component<span class="string">&quot; home</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>

<h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>要在<code>/home</code>页面下设置<code>/home/news</code>和<code>/home/message</code></p>
<h3 id="配置和使用"><a href="#配置和使用" class="headerlink" title="配置和使用"></a>配置和使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="comment">//使用前引入，安装(省)</span></span><br><span class="line"><span class="keyword">const</span> routes:[</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component:home,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//嵌套的子组件路径前不加/</span></span><br><span class="line">                path:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                component:news,</span><br><span class="line">            &#125;，</span><br><span class="line">            &#123;</span><br><span class="line">            	path:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            	component:news</span><br><span class="line">			&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>因为我们是在home页面下配置的嵌套子路由，所以我们要在home.vue下配置<code>router-link</code>和<code>router-view</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意这里to必须是完整的路径，因为to不会切换到当前路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>PS:嵌套路由也可以默认重定向</strong></p>
<h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><ul>
<li>路径配置格式:  <code>path: &#39;/router/:id&#39;</code>=&gt;形成的路径格式<code>/router/id(变值)</code></li>
<li>获取：直接通过<code>&#123;&#123;$route.params.id(与path中的命名一致)&#125;&#125;</code>获取</li>
</ul>
<h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><ul>
<li><p>路由配置格式：普通格式</p>
</li>
<li><p>router-link配置：这时的<code>to=&#39;&#39;</code>里是一个对象</p>
<ul>
<li>对象内容：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	path:&#39;&#39;&#x2F;&#x2F;路由的路径</span><br><span class="line">	query:&#123;</span><br><span class="line">	&#x2F;&#x2F;这里是传入的数据</span><br><span class="line">		data: value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取：在相应的组件中通过<code>&#123;&#123;$route.query.**&#125;&#125;</code>获得</p>
<ul>
<li>$route会自动传入data中，所以可以直接获取</li>
</ul>
</li>
</ul>
<h3 id="router-amp-route详解"><a href="#router-amp-route详解" class="headerlink" title="$router &amp; $route详解"></a>$router &amp; $route详解</h3><h2 id="全局导航守卫"><a href="#全局导航守卫" class="headerlink" title="全局导航守卫"></a>全局导航守卫</h2><p>​    用于监听路由跳转的过程。</p>
<h3 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach"></a>beforeEach</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">//这里必须调用next()函数，用于跳转到下一个守卫</span></span><br><span class="line">	next()</span><br><span class="line">    <span class="comment">//这里的CODE会在跳转前执行</span></span><br><span class="line">    CODE</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="afterEach"><a href="#afterEach" class="headerlink" title="afterEach"></a>afterEach</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to.<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里的CODE会在跳转后执行</span></span><br><span class="line">    CODE</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h2><h2 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h2><h2 id="vue-keepalive"><a href="#vue-keepalive" class="headerlink" title="vue-keepalive"></a>vue-keepalive</h2><p>vue组件的状态在跳转后不会被保存，每次会创建一个新的组件。这样不仅消耗资源，并且会带来一些使用上的问题</p>
<p>我们使用vue内置组件<code>&lt;keep-alive&gt;</code>来解决</p>
<ul>
<li>用法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&#x27;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>include和exclude参数<ul>
<li><code>include:&#39;&#39;</code>：仅’’内的组件套用<code>keep-alive</code></li>
<li><code>exclude:&#39;&#39;</code>：’’外的组件套用<code>keep-alive</code></li>
<li><code>&#39;&#39;</code>内为正则表达式或字符串</li>
</ul>
</li>
</ul>
<h3 id="activated-amp-deactivated"><a href="#activated-amp-deactivated" class="headerlink" title="activated()&amp;deactivated"></a>activated()&amp;deactivated</h3><p>​    在当前组件活跃(不活跃)时执行的函数</p>
<p>必须在<code>&lt;keep-alive&gt;</code>内包含的组件才能使用这两个函数</p>
<h1 id="TabBar实例"><a href="#TabBar实例" class="headerlink" title="TabBar实例"></a>TabBar实例</h1><ul>
<li>**SampleString.indexOf(String)**方法</li>
</ul>
<p>返回括号内<code>String</code>在<code>SampleString</code>第一次出现的位置，若没有出现则返回-1</p>
<p>p125</p>
]]></content>
      <tags>
        <tag>buliding...</tag>
      </tags>
  </entry>
</search>
